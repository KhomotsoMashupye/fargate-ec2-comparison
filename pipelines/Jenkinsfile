pipeline {
    agent any

    environment {
        AWS_REGION = 'af-south-1'
        AWS_ACCOUNT_ID = '522237065210'
        ECR_REPO = 'my-app-latest-repo'
        DOCKER_IMAGE_TAG = "latest-${env.BUILD_NUMBER}"
        ECS_CLUSTER = 'devops-cluster'
        ECS_SERVICE = 'devops-service'
        EC2_INSTANCE_ID = 'i-064113b26d1914b06'
        SSH_KEY_PATH = '/home/ubuntu/keys/devops3-key.pem'
    }

    options {
        timestamps()
        timeout(time: 45, unit: 'MINUTES') // reduce if your tasks usually finish faster
        retry(2) // retry if a stage fails
    }

    stages {

        stage('Build Docker Image') {
            steps {
                script {
                    echo "Building Docker image..."
                    sh "docker build -t ${ECR_REPO}:${DOCKER_IMAGE_TAG} ."
                }
            }
        }

        stage('Login to ECR') {
            steps {
                script {
                    echo "Logging into AWS ECR..."
                    sh """
                        aws ecr get-login-password --region $AWS_REGION | \
                        docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
                    """
                }
            }
        }

        stage('Push Docker Image to ECR') {
            steps {
                script {
                    echo "Tagging Docker image..."
                    sh "docker tag ${ECR_REPO}:${DOCKER_IMAGE_TAG} $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/${ECR_REPO}:${DOCKER_IMAGE_TAG}"
                    
                    echo "Pushing Docker image..."
                    sh "docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/${ECR_REPO}:${DOCKER_IMAGE_TAG}"
                }
            }
        }

        stage('Deploy to ECS Fargate') {
            steps {
                script {
                    echo "Updating ECS service..."
                    sh """
                        aws ecs update-service \
                            --cluster ${ECS_CLUSTER} \
                            --service ${ECS_SERVICE} \
                            --force-new-deployment \
                            --region ${AWS_REGION}
                    """
                }
            }
        }

        stage('Deploy to EC2') {
            steps {
                script {
                    echo "Deploying Docker container to EC2..."
                    sh """
                        ssh -o StrictHostKeyChecking=no -i ${SSH_KEY_PATH} ubuntu@${EC2_INSTANCE_ID} \\
                        'echo Starting deployment... && \\
                         docker pull $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/${ECR_REPO}:${DOCKER_IMAGE_TAG} && \\
                         docker stop my-app || echo "Container not running" && \\
                         docker rm my-app || echo "No container to remove" && \\
                         docker run -d --name my-app -p 80:80 $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/${ECR_REPO}:${DOCKER_IMAGE_TAG} && \\
                         echo Deployment complete.'
                    """
                }
            }
        }

    }

    post {
        success {
            echo "Pipeline completed successfully!"
        }
        failure {
            echo "Pipeline failed. Check the logs for details."
        }
        always {
            echo "Cleaning up workspace..."
            cleanWs()
        }
    }
}
